## General Settings

# username of main user you do everything as
local_user: username

# configure the root user as well as the local_user when setting up
# shells/configs
configure_root: true

# Standard system locale
# https://wiki.archlinux.org/index.php/Locale
system_locale: en_US.UTF-8

# enable tmux support
use_tmux: false

# enable powerline suport
use_powerline: false

# powerline colors
powerline_colorscheme: default
powerline_prompt_bg_color: 'darkblue'
powerline_prompt_bg_color_root: 'red'
powerline_xonsh_prompt_bg_color: '#0087af'
powerline_xonsh_prompt_bg_color_root: 'RED'

## Pacman AUR settings

# must be one of the AUR Helpers supported by ansible-aur:
# https://github.com/kewlfft/ansible-aur
# yay, aurman, pacaur, trizen, pikaur
aur_builder: pikaur

# user to use when installing AUR packages,
# will automatically be created and given correct permissions
# should not be main user as it will also be excluded from Login Screen
aur_user: aur

## X11 Forwarding settings

# Install X11 helper script to install, useful if you plan to run remote
# X11 applications on your local
x11_copy_script: true

# dictionary of short names for various SSH hosts for X11/GPG helper scripts
host_aliases:
 - { alias: local, host: 127.0.0.1 }

# Enable X11 forwaring over SSH on your local system. You must be running
# sshd for this to work
x11_enable_forwarding: true

## Shell settings

# default login shell for the user
# supported default shells: bash, zsh
default_shell: bash

# secondary shell is a unstable non-login shell that gets loaded in rc file
# for login shell
# supported default shells: xonsh
secondary_shell: none

# additional shells to config
# can be any values of default/secondary shells
# must include default and secondary shell vars from above
enabled_shells:
  - bash
  - zsh

## Git Settings

# name and email for git, both must be configure to set .git_config
git_email: none
git_name: none

# public GPG signing key to use for git
git_signing_key: none

## GPG Helper settings

# Copies gpg-remote helper script to easily forward GPG Agent to remote hosts
copy_gpg_script: true

# WSL specific GPG settings to get Windows 10 GPG Agent in WSL
# See https://codingnest.com/how-to-use-gpg-with-yubikey-wsl/ for setup
wsl_npiperelay_path: none
windows_gpg_agent_path: none
