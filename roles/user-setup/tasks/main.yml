- name: Validate shell type
  assert:
    that: not item or item in user_supported_shells
    msg: 'Supported Shell types: {{ user_supported_shells }}'
  with_items: "{{ user_shells }}"

- name: Set local variables
  set_fact:
    user_has_secondary_shell: "{{ user_secondary_shell != 'none' }}"
    user_install_xonsh: "{{ user_shells and 'xonsh' in user_shells }}"
    user_install_bash: "{{ user_shells and 'bash' in user_shells }}"
    user_install_zsh: "{{ user_shells and 'zsh' in user_shells }}"

- name: Validate default shell type
  assert:
    that: user_default_shell in user_default_shells
    msg: 'Supported Default Shell types: {{ user_default_shells }}'

- name: Validate secondary shell type
  assert:
    that:
    - user_secondary_shell in user_secondary_shells
    - user_secondary_shell in user_shells
    msg: 'Supported Seconary Shell types: {{ user_secondary_shells }}, must also be in user_shells'
  when: user_has_secondary_shell|bool

- name: Users to configure
  debug:
    var: user_users

- name: Get python3 Version
  shell: "set -o pipefail && python3 --version | sed 's/Python \\([0-9]*.[0-9]*\\).[0-9]/\\1/' | tr -d '\n'"
  args:
    executable: /bin/bash
  register: py_version
  changed_when: false

- name: Set powerline_base (Arch)
  set_fact:
    user_powerline_base: /usr/lib/python{{ py_version.stdout }}/site-packages/powerline
  when: ansible_distribution in pacman_distros

- name: Set powerline_base (Ubuntu)
  set_fact:
    user_powerline_base: /usr/share/powerline
  when: ansible_distribution in apt_distros

- name: Print python_base
  debug:
    msg: "{{ user_powerline_base }}"
    verbosity: 1

- name: Install tmux
  include_role:
    name: pkg-install
  vars:
    pkg_name: tmux
  when: user_use_tmux|bool

- name: Install powerline (package manager)
  include_role:
    name: pkg-install
  vars:
    pkg_name:
    - powerline
    - powerline-fonts
    pkg_apt_name:
    - powerline
  when:
  - user_use_powerline|bool

- name: Install xonsh (package manager)
  include_role:
    name: pkg-install
  vars:
    pkg_name:
    - xonsh
    - python-prompt_toolkit
    - python-pygments
    - python-distro
    - python-setproctitle
    pkg_apt_name:
    - python3-prompt-toolkit
    - python3-pygments
    - python3-distro
    - python3-setproctitle
  when: user_install_xonsh|bool

- name: Install xonsh (pip)
  pip:
    name:
        - xonsh
    extra_args: --upgrade
    executable: pip3
  when:
  - user_install_xonsh|bool
  - ansible_distribution in apt_distros

- name: Install xonsh extras
  pip:
    name:
        - xonsh-autoxsh
        - git+https://github.com/AngellusMortis/xontrib-avox.git
        # - xonsh-click-tabcomplete
        # - git+https://github.com/AngellusMortis/xonsh-vox-tabcomplete.git
    extra_args: --upgrade
    executable: pip3
  when: user_install_xonsh|bool

- name: Install xonsh powerline
  pip:
    name: xontrib-powerline2
    # name: git+https://github.com/AngellusMortis/xontrib-powerline.git@colors
    extra_args: --upgrade
    executable: pip3
  when:
  - user_install_xonsh|bool
  - user_use_powerline|bool

- name: Install zsh
  include_role:
    name: pkg-install
  vars:
    pkg_name:
    - zsh
    - zsh-syntax-highlighting
    - zsh-autosuggestions
    - zsh-completions
  when: user_install_zsh|bool

# TODO: Integrate: https://github.com/aur-archive/zpython3-git/blob/master/PKGBUILD

- name: Install bash
  include_role:
    name: pkg-install
  vars:
    pkg_name:
    - bash
  when: user_install_bash|bool

- name: Create Users
  user:
    name: "{{ item.user }}"
    groups: "{{ item.groups | default('') }}"
  with_items: "{{ user_users_create }}"

- name: Configure Users
  include: user.yml
  when: "user_user['configure'] | default(True) | bool"
  with_items: "{{ user_users }}"
  loop_control:
    loop_var: user_user
